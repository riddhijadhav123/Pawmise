{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\pet_app\\\\frontend\\\\src\\\\PayButton.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PayButton({\n  amount\n}) {\n  const handlePayment = async () => {\n    // Step 1: Request order creation from your backend server\n    const res = await fetch(\"http://localhost:5000/api/payment/orders\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        amount\n      }) // Amount in rupees (e.g. 500)\n    });\n    const order = await res.json();\n\n    // Step 2: Setup Razorpay payment options using order info and test key\n    const options = {\n      key: \"YOUR_TEST_KEY_ID\",\n      // Replace with your actual Razorpay Test Key ID\n      amount: order.amount,\n      currency: order.currency,\n      name: \"Pawmise Pets\",\n      description: \"Pet Adoption Payment\",\n      order_id: order.id,\n      handler: response => {\n        alert(\"Payment Successful! Payment ID: \" + response.razorpay_payment_id);\n        // You can use response.razorpay_payment_id, order_id, etc. for confirmation or saving to backend\n      },\n      prefill: {\n        name: \"\",\n        email: \"\",\n        contact: \"\"\n      },\n      theme: {\n        color: \"#3a86ff\"\n      }\n    };\n\n    // Step 3: Open Razorpay modal\n    const rzp = new window.Razorpay(options);\n    rzp.open();\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: handlePayment,\n    children: [\"Pay \\u20B9\", amount]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_c = PayButton;\nexport default PayButton;\nvar _c;\n$RefreshReg$(_c, \"PayButton\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","PayButton","amount","handlePayment","res","fetch","method","headers","body","JSON","stringify","order","json","options","key","currency","name","description","order_id","id","handler","response","alert","razorpay_payment_id","prefill","email","contact","theme","color","rzp","window","Razorpay","open","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Lenovo/Desktop/pet_app/frontend/src/PayButton.js"],"sourcesContent":["import React from 'react';\r\n\r\nfunction PayButton({ amount }) {\r\n  const handlePayment = async () => {\r\n    // Step 1: Request order creation from your backend server\r\n    const res = await fetch(\"http://localhost:5000/api/payment/orders\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ amount }), // Amount in rupees (e.g. 500)\r\n    });\r\n    const order = await res.json();\r\n\r\n    // Step 2: Setup Razorpay payment options using order info and test key\r\n    const options = {\r\n      key: \"YOUR_TEST_KEY_ID\", // Replace with your actual Razorpay Test Key ID\r\n      amount: order.amount,\r\n      currency: order.currency,\r\n      name: \"Pawmise Pets\",\r\n      description: \"Pet Adoption Payment\",\r\n      order_id: order.id,\r\n      handler: (response) => {\r\n        alert(\"Payment Successful! Payment ID: \" + response.razorpay_payment_id);\r\n        // You can use response.razorpay_payment_id, order_id, etc. for confirmation or saving to backend\r\n      },\r\n      prefill: {\r\n        name: \"\",\r\n        email: \"\",\r\n        contact: \"\",\r\n      },\r\n      theme: {\r\n        color: \"#3a86ff\"\r\n      }\r\n    };\r\n\r\n    // Step 3: Open Razorpay modal\r\n    const rzp = new window.Razorpay(options);\r\n    rzp.open();\r\n  };\r\n\r\n  return (\r\n    <button onClick={handlePayment}>\r\n      Pay â‚¹{amount}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default PayButton;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,SAASA,CAAC;EAAEC;AAAO,CAAC,EAAE;EAC7B,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC;IACA,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,0CAA0C,EAAE;MAClEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAER;MAAO,CAAC,CAAC,CAAE;IACpC,CAAC,CAAC;IACF,MAAMS,KAAK,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,CAAC;;IAE9B;IACA,MAAMC,OAAO,GAAG;MACdC,GAAG,EAAE,kBAAkB;MAAE;MACzBZ,MAAM,EAAES,KAAK,CAACT,MAAM;MACpBa,QAAQ,EAAEJ,KAAK,CAACI,QAAQ;MACxBC,IAAI,EAAE,cAAc;MACpBC,WAAW,EAAE,sBAAsB;MACnCC,QAAQ,EAAEP,KAAK,CAACQ,EAAE;MAClBC,OAAO,EAAGC,QAAQ,IAAK;QACrBC,KAAK,CAAC,kCAAkC,GAAGD,QAAQ,CAACE,mBAAmB,CAAC;QACxE;MACF,CAAC;MACDC,OAAO,EAAE;QACPR,IAAI,EAAE,EAAE;QACRS,KAAK,EAAE,EAAE;QACTC,OAAO,EAAE;MACX,CAAC;MACDC,KAAK,EAAE;QACLC,KAAK,EAAE;MACT;IACF,CAAC;;IAED;IACA,MAAMC,GAAG,GAAG,IAAIC,MAAM,CAACC,QAAQ,CAAClB,OAAO,CAAC;IACxCgB,GAAG,CAACG,IAAI,CAAC,CAAC;EACZ,CAAC;EAED,oBACEhC,OAAA;IAAQiC,OAAO,EAAE9B,aAAc;IAAA+B,QAAA,GAAC,YACzB,EAAChC,MAAM;EAAA;IAAAiC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEb;AAACC,EAAA,GA1CQtC,SAAS;AA4ClB,eAAeA,SAAS;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}